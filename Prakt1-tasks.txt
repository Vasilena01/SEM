# Tasks from week1
# Examples
v <- c(5, 7, -5, 4, 3)
v[v %% 2 == 0]
v[order(v)]

len <- length(v)
v <- c(1:len)
v
v[-c(1:len)]

# Conditions
n <- 10
m <- ifelse(n=-10, 2*n, n/2)
m

bools <- c(T, T, F, F, T)
any(bools)

# Task 1
exp.balls <- function() {
  t <- sample(c(1:8), size=2, replace=T) # returns a vector with two selected el
  t[1]
  t[1] == t[2] #is the first el = to the second
}

# N - how many times we want to execute our experiment
prob.balls <- function(N) {
  results <- replicate(N, exp.balls()) # returns vector of bools - exp.balls called N times
  sum(results)/N # we get how many times have we got equal balls
}

prob.balls(100000)

# Task 2
exp.socks <- function() {
    # creates an array with pairs(repeats each num 2 times): 1,1,2,2,3,3
    v <- rep(c(1,2,3), each=2) 
    s <- sample(v, 2, replace=F) # get 2 nums from v, without replace
    s[1] == s[2]
}

prob.socks <- function(N) {
    results <- replicate(N, exp.socks())
    sum(results) / N
}

prob.socks(100000)

# Task 3
exp.keys <- function() {
    bools <- c(F, F, F, T) # we represent the keys with T or F
    v <- sample(bools, 4, replace=F) # get a rndm permutation of the 4 elements
    v[4] # return the 4th element value
}

prob.keys <- function(N) {
    results <- replicate(N, exp.keys())
    sum(results)/N
}

prob.keys(100000)

# Task 4
exp.questions <- function() {
    questions <- c(rep(T, 17), rep(F, 3))
    exam_questions <- sample(questions, 2, F)
    # return is the first question F or the second
    exam_questions[1] == F | exam_questions[2] == F 
}

prob.questions <- function(N) {
    results <- replicate(N, exp.questions())
    sum(results)/N
}

prob.questions(100000)

# Task 5
exp.birthday <- function() {
    dates <- sample(c(1:365), 25, T) # get one num between 1-365
    has_duplicates <- anyDuplicated(dates) != 0
    has_duplicates
}

prob.birthday <- function(N) {
    results <- replicate(N, exp.birthday())
    sum(results)/N
}

prob.birthday(100000)

# Task 6
exp.presents <- function() {
    recipients <- sample(c(1:20), 20, F)
    isMe <- recipients == 1:20 #checks if the numbers (1,..20) are equal to the recipients list (5,2,3,4,...20), here will be equal the nums at position 2,4,20
    any(isMe)
}

prob.presents <- function(N) {
    results <- replicate(N, exp.presents())
    sum(results)/N
}

prob.presents(100000)

# Task 7
exp.triangle <- function() {
    start_positions <- c(1, 2, 3)
    
    # For each corner we will save one of the other available positions
    end_positions <- vector("logical", length=3) # create an array with zeros
    for (curr in c(1:3)) {
        choice <- sample(start_positions[-curr], 1, T)
        end_positions[curr] <- choice
    }
    unique_els <- unique(end_positions)
    length(unique_els) == 3 
}

prob.triangle <- function(N) {
    results <- replicate(N, exp.triangle())
    sum(results)/N
}

prob.triangle(10000)

# Task 8

exp.eggs <- function() {
    # a)
    eggs <- c(F, F, F, F, F, F, T, T)
    choice <- sample(eggs, 8, F)
    first <- choice[c(1,3,5,7)]
    second <- choice[c(2,4,6,8)]
    sum(first) == 2 | sum(second) == 2 
    
    # b)
    sum(first) == 1 & sum(second) == 1
    
    # c)
    sum(first) == 2
    
    # d)
    sum(second) == 2
}

prob.eggs <- function(N) {
    result <- replicate(N, exp.eggs())
    sum(result)/N
}

prob.eggs(100000)

# Task 9

exp.exam <- function() {
    
    final_result <- vector("logical", 10)
    # For each question we choose between 4 answers
    for (index in (1:10)) {
        bools <- c(F, F, T, F)
        final_result[index] <- sample(bools, 1, F)
    }
    
    sum(final_result) >= 5
}
prob.exam <- function(N) {
    result <- replicate(N, exp.exam())
    sum(result)/N
}

prob.exam(10000)

# Task 10

exp.flight <- function(num_seats, num_pass, p) {
    passengers <- sample(c(1, 0), num_pass, replace=TRUE, prob=c(p, 1-p))
    # a)
    sum(passengers) <= num_seats
    # b)
    sum(passengers) == num_seats - 1
}

prob.flight <- function(N) {
    results <- replicate(N, exp.flight(138, 143, 0.92))
    sum(results)/N
}

prob.flight(100000)

# Task 11

# 1 - green, 0 - red
exp.boxes.a <- function() {
    dice <- c(1:6)
    box1 <- c(rep(1, 2), rep(0, 2))
    box2 <- c(rep(1, 1), rep(0, 4))
    ball <- ifelse(sample(dice, 1) == 6, sample(box1, 1), sample(box2, 1))
    ball
}

exp.boxes.b <- function() {
    dice <- sample(c(1:6), 1)
    box1 <- c(rep(1, 2), rep(0, 2))
    box2 <- c(rep(1, 1), rep(0, 4))
    ball <- ifelse(dice == 6, sample(box1, 1), sample(box2, 1))
    c(ball, dice)
}

prob.boxes <- function(N) {
    # results <- replicate(N, exp.boxes.a())
    # sum(results)/N
    
    results <- replicate(N, exp.boxes.b())
    sum_to_get_green_ball <- sum(results[1,])
    sum_to_get_from_box2_and_green_ball <- sum(results[2,] != 6 & results[1,] == 1)
    sum_to_get_6_at_the_dice_and_green_ball / sum_to_get_green_ball
}

prob.boxes(100000)

# Task 12

exp.coins.a <- function() {
    # The coins are separated in 3 models: 1 - T11, 2 - T22, 3 - T12
    coins <- c(1, 1, 2, 3, 3)
    # Choose random coin
    choice <- sample(coins, 1, F)
    if (choice == 1) {
        return (TRUE)
    } else if (choice == 2) {
        return (FALSE)
    } else {
        # We flip the coin
        flip <- sample(c(0,1), 1, F)
        return (flip == 1)
    }
}

exp.coins.b <- function() {
    coins <- c(1, 1, 2, 3, 3)
    repeat {
        # Choose random coin
        choice <- sample(coins, 1, F)
        if (choice == 1) {
            # we have the first side as 1, but the other side is not 2
            return (FALSE)
        } else if (choice == 2) {
            next
        } else {
            # We flip the coin
            flip <- sample(c(0,1), 1, F)
            if (flip == 1) {
                next
            } else {
                # so the other side is 2
                return (TRUE)
            }
        }
    }
}

prob.coins <- function(N) {
    #results <- replicate(N, exp.coins.a())
    results <- replicate(N, exp.coins.b())
    sum(results)/N
}

prob.coins(100000)

# Task 13

exp.cards <- function() {
    # Options - 1 - only white, 2 - only black, 3 - black & white
    cards <- c(1, 2, 3)
    repeat {
        choice <- sample(cards, 1, F)
        if (choice == 2) {
            next
        } else if (choice == 1) {
            return (TRUE)
        } else {
            first_side <- sample(c(1,0), 1, F)
            if (first_side == 1) {
                # if the first side is white, so the second side is black
                return (FALSE)
            } else {
                # the first side is black, so it doesn't meet the first criterion for white first side
                next
            }
        }
    }
}

prob.cards <- function(N) {
    results <- replicate(N, exp.cards())
    sum(results)/N
}

prob.cards(100000)

# Task 14

exp.balls <- function() {
   chosen_balls <- sample(c(1:99), 4, F)
   max_index <- which.max(chosen_balls)
   max_index == 1
}

prob.balls <- function(N) {
    results <- replicate(N, exp.balls())
    sum(results)/N
}

prob.balls(100000)

# Task 15

exp.people <- function() {
    # Ivan and Georgi will be marked as 1, the others will be 0
    people <- c(rep(0, 18), rep(1, 2))
    permutation_people <- sample(people, 20, F)
    # Get the indicies of the ones using the which function
    one_indicies <- which(permutation_people == 1)
    one_indicies[1] == one_indicies[2] - 1 
}

prob.people <- function(N) {
    results <- replicate(N, exp.people())
    sum(results) / N
}

prob.people(100000)

# Task 16

exp.cards <- function() {
   cards <- c(rep(0, 48), rep(1, 4))
   cards_perm <- sample(cards, 52, F)
   players_choices <- matrix(
        data=cards_perm,
        nrow=4,
        ncol=13
   )
   # Returns a vector with the sum of each row and then check if all sums of the rows is 1
   row_sums <- rowSums(players_choices)
   all(row_sums == 1)
}

prob.cards <- function(N) {
    results <- replicate(N, exp.cards())
    sum(results)/N
}

prob.cards(100000)

# Task 17

exp.building.a <- function() {
   floors <- c(2:16)
   floors_per_person <- sample(floors, 7, T)
   anyDuplicated(floors_per_person) > 0
}

exp.building.b <- function() {
   floors <- c(2:16)
   my_choice <- sample(floors, 1, T)
   floors_per_person <- sample(floors, 6, T)
   is_found <- any(floors_per_person == my_choice)
}

prob.building <- function(N) {
    #results <- replicate(N, exp.building.a())
    results <- replicate(N, exp.building.b())
    sum(results)/N
}

prob.building(100000)