# Tasks from week1
# Examples
v <- c(5, 7, -5, 4, 3)
v[v %% 2 == 0]
v[order(v)]

len <- length(v)
v <- c(1:len)
v
v[-c(1:len)]

# Conditions
n <- 10
m <- ifelse(n=-10, 2*n, n/2)
m

bools <- c(T, T, F, F, T)
any(bools)

# Task 1
exp.balls <- function() {
  t <- sample(c(1:8), size=2, replace=T) # returns a vector with two selected el
  t[1]
  t[1] == t[2] #is the first el = to the second
}

# N - how many times we want to execute our experiment
prob.balls <- function(N) {
  results <- replicate(N, exp.balls()) # returns vector of bools - exp.balls called N times
  sum(results)/N # we get how many times have we got equal balls
}

prob.balls(100000)

# Task 2
exp.socks <- function() {
    # creates an array with pairs(repeats each num 2 times): 1,1,2,2,3,3
    v <- rep(c(1,2,3), each=2) 
    s <- sample(v, 2, replace=F) # get 2 nums from v, without replace
    s[1] == s[2]
}

prob.socks <- function(N) {
    results <- replicate(N, exp.socks())
    sum(results) / N
}

prob.socks(100000)

# Task 3
exp.keys <- function() {
    bools <- c(F, F, F, T) # we represent the keys with T or F
    v <- sample(bools, 4, replace=F) # get a rndm permutation of the 4 elements
    v[4] # return the 4th element value
}

prob.keys <- function(N) {
    results <- replicate(N, exp.keys())
    sum(results)/N
}

prob.keys(100000)

# Task 4
exp.questions <- function() {
    questions <- c(rep(T, 17), rep(F, 3))
    exam_questions <- sample(questions, 2, F)
    # return is the first question F or the second
    exam_questions[1] == F | exam_questions[2] == F 
}

prob.questions <- function(N) {
    results <- replicate(N, exp.questions())
    sum(results)/N
}

prob.questions(100000)

# Task 5
exp.birthday <- function() {
    dates <- sample(c(1:365), 25, T) # get one num between 1-365
    has_duplicates <- anyDuplicated(dates) != 0
    has_duplicates
}

prob.birthday <- function(N) {
    results <- replicate(N, exp.birthday())
    sum(results)/N
}

prob.birthday(100000)

# Task 6

exp.presents <- function() {
    recipients <- sample(c(1:20), 20, F)
    isMe <- recipients == 1:20 #checks if the numbers (1,..20) are equal to the recipients list (5,2,3,4,...20), here will be equal the nums at position 2,4,20
    any(isMe)
}

prob.presents <- function(N) {
    results <- replicate(N, exp.presents())
    sum(results)/N
}

prob.presents(100000)